{"version":3,"sources":["sounds.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../../src","sourcesContent":["const { scribble } = window;\n\nexport const piano = {\n  BUTTON_3: scribble.clip({\n    sample: '/assets/sounds/piano48.wav',\n    pattern: '[x]',\n  }),\n  BUTTON_4: scribble.clip({\n    sample: '/assets/sounds/piano49.wav',\n    pattern: '[x]',\n  }),\n  BUTTON_1: scribble.clip({\n    sample: '/assets/sounds/piano50.wav',\n    pattern: '[x]',\n  }),\n  BUTTON_2: scribble.clip({\n    sample: '/assets/sounds/piano51.wav',\n    pattern: '[x]',\n  }),\n  THROW: scribble.clip({\n    sample: '/assets/sounds/piano52.wav',\n    pattern: '[x]',\n  }),\n  AMP: scribble.clip({\n    sample: '/assets/sounds/piano53.wav',\n    pattern: '[x]',\n  }),\n  LEFT_BOTTOM_SHOULDER: scribble.clip({\n    sample: '/assets/sounds/piano54.wav',\n    pattern: '[x]',\n  }),\n  RIGHT_BOTTOM_SHOULDER: scribble.clip({\n    sample: '/assets/sounds/piano55.wav',\n    pattern: '[x]',\n  }),\n  SELECT_BACK: scribble.clip({\n    sample: '/assets/sounds/piano56.wav',\n    pattern: '[x]',\n  }),\n  START_FORWARD: scribble.clip({\n    sample: '/assets/sounds/piano57.wav',\n    pattern: '[x]',\n  }),\n  LEFT_STICK: scribble.clip({\n    sample: '/assets/sounds/piano58.wav',\n    pattern: '[x]',\n  }),\n  RIGHT_STICK: scribble.clip({\n    sample: '/assets/sounds/piano59.wav',\n    pattern: '[x]',\n  }),\n  DPAD_UP: scribble.clip({\n    sample: '/assets/sounds/piano60.wav',\n    pattern: '[x]',\n  }),\n  DPAD_DOWN: scribble.clip({\n    sample: '/assets/sounds/piano61.wav',\n    pattern: '[x]',\n  }),\n  DPAD_LEFT: scribble.clip({\n    sample: '/assets/sounds/piano62.wav',\n    pattern: '[x]',\n  }),\n  DPAD_RIGHT: scribble.clip({\n    sample: '/assets/sounds/piano63.wav',\n    pattern: '[x]',\n  }),\n};\n\nexport const midi = {\n  BUTTON_3: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'a4',\n    pattern: '[[x]]',\n  }),\n  BUTTON_4: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'a3',\n    pattern: '[x]',\n  }),\n  BUTTON_1: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'c0',\n    pattern: '[x]',\n  }),\n  BUTTON_2: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'c1',\n    pattern: '[x]',\n  }),\n  THROW: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'c2',\n    pattern: '[x]',\n  }),\n  AMP: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'c3',\n    pattern: '[x]',\n  }),\n  LEFT_BOTTOM_SHOULDER: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'c4',\n    pattern: '[x]',\n  }),\n  RIGHT_BOTTOM_SHOULDER: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'c5',\n    pattern: '[x]',\n  }),\n  SELECT_BACK: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'c6',\n    pattern: '[x]',\n  }),\n  START_FORWARD: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'c7',\n    pattern: '[x]',\n  }),\n  LEFT_STICK: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'c8',\n    pattern: '[x]',\n  }),\n  RIGHT_STICK: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'c9',\n    pattern: '[x]',\n  }),\n  DPAD_UP: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'c4',\n    pattern: '[x]',\n  }),\n  DPAD_DOWN: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'd4',\n    pattern: '[x]',\n  }),\n  DPAD_LEFT: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'e4',\n    pattern: '[x]',\n  }),\n  DPAD_RIGHT: scribble.clip({\n    synth: 'PluckSynth',\n    notes: 'f4',\n    pattern: '[x]',\n  }),\n};\n","import { piano, midi } from './sounds';\n\nconst { Tone } = window;\n\nlet gamepad_is_connected = false;\nconst getControlName = (names, index, extraPrefix) => {\n  return index < names.length\n    ? names[index]\n    : extraPrefix + (index - names.length + 1);\n};\n\nconst active = {};\n\nconst STANDARD_BUTTONS = [\n  'BUTTON_3',\n  'BUTTON_4',\n  'BUTTON_1',\n  'BUTTON_2',\n  'THROW',\n  'AMP',\n  'LEFT_BOTTOM_SHOULDER',\n  'RIGHT_BOTTOM_SHOULDER',\n  'SELECT_BACK',\n  'START_FORWARD',\n  'LEFT_STICK',\n  'RIGHT_STICK',\n  'DPAD_UP',\n  'DPAD_DOWN',\n  'DPAD_LEFT',\n  'DPAD_RIGHT',\n  'HOME',\n];\n\nconst handleButtonPress = () => {\n  for (const pad of navigator.getGamepads()) {\n    if (pad) {\n      pad.axes.forEach((axis, index) => {\n        // left/right\n        if (index === 6 && axis === 0 && active['DPAD_LEFT']) {\n          piano['DPAD_LEFT'].stop();\n        }\n        if (index === 6 && axis === -1) {\n          console.log('DPAD_LEFT');\n          active['DPAD_LEFT'] = true;\n          piano['DPAD_LEFT'].start();\n        }\n        if (index === 6 && axis === 0 && active['DPAD_RIGHT']) {\n          piano['DPAD_RIGHT'].stop();\n        }\n        if (index === 6 && axis === 1) {\n          console.log('DPAD_RIGHT');\n          active['DPAD_RIGHT'] = true;\n          piano['DPAD_RIGHT'].start();\n        }\n\n        // up/down\n        if (index === 7 && axis === 0 && active['DPAD_UP']) {\n          piano['DPAD_UP'].stop();\n        }\n        if (index === 7 && axis === -1) {\n          console.log('DPAD_UP');\n          active['DPAD_UP'] = true;\n          piano['DPAD_UP'].start();\n        }\n        if (index === 7 && axis === 0 && active['DPAD_DOWN']) {\n          piano['DPAD_DOWN'].stop();\n        }\n        if (index === 7 && axis === 1) {\n          console.log('DPAD_DOWN');\n          active['DPAD_DOWN'] = true;\n          piano['DPAD_DOWN'].start();\n        }\n      });\n      pad.buttons.forEach((button, index) => {\n        const name = getControlName(STANDARD_BUTTONS, index, 'EXTRA_BUTTON_');\n        if (midi[name]) {\n          if (button.value === 1) {\n            console.log(name);\n            active[name] = true;\n            midi[name].start();\n          }\n          if (active[name] && button.value !== 1) {\n            active[name] = false;\n            midi[name].stop();\n          }\n        }\n      });\n    }\n  }\n};\n\nconst runAnimation = () => {\n  if (!gamepad_is_connected) {\n    return;\n  }\n\n  window.requestAnimationFrame(runAnimation);\n  handleButtonPress();\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log(`Let's GO!`);\n\n  Tone.Transport.start();\n\n  window.addEventListener('gamepadconnected', (event) => {\n    console.log('Gamepad connected');\n    gamepad_is_connected = true;\n\n    window.requestAnimationFrame(runAnimation);\n  });\n\n  window.addEventListener('gamepaddisconnected', (event) => {\n    console.log('Gamepad disconnected:');\n\n    gamepad_is_connected = false;\n  });\n});\n"]}